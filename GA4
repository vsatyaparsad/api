#!/bin/bash

# Set error handling
set -e

# Function to get configuration from Snowflake using SnowSQL
get_snowflake_config() {
    # Assuming you have SnowSQL configured with credentials
    local query="SELECT json_file_path, proxy_host, proxy_port, dimensions, measures, dimension_filters, start_date, end_date FROM ga4_config_table WHERE is_active = TRUE;"
    
    # Execute query and store results in variables
    read -r json_file_path proxy_host proxy_port dimensions measures filters start_date end_date <<< $(snowsql -q "$query" --output-format=tsv)
    
    # Export variables for use in other functions
    export JSON_FILE_PATH="$json_file_path"
    export PROXY_HOST="$proxy_host"
    export PROXY_PORT="$proxy_port"
    export DIMENSIONS="$dimensions"
    export MEASURES="$measures"
    export FILTERS="$filters"
    export START_DATE="$start_date"
    export END_DATE="$end_date"
}

# Function to create GA4 API request body
create_request_body() {
    local dimensions_array=(${DIMENSIONS//,/ })
    local measures_array=(${MEASURES//,/ })
    
    # Create dimensions array
    local dimensions_json="["
    for dim in "${dimensions_array[@]}"; do
        dimensions_json="$dimensions_json{\"name\":\"$dim\"},"
    done
    dimensions_json="${dimensions_json%,}]"
    
    # Create metrics array
    local metrics_json="["
    for metric in "${measures_array[@]}"; do
        metrics_json="$metrics_json{\"name\":\"$metric\"},"
    done
    metrics_json="${metrics_json%,}]"
    
    # Create date ranges
    local date_ranges="[{\"startDate\":\"$START_DATE\",\"endDate\":\"$END_DATE\"}]"
    
    # Create base request body
    local request_body="{
    \"dateRanges\": $date_ranges,
    \"dimensions\": $dimensions_json,
    \"metrics\": $metrics_json"
    
    # Add filters only if they are properly defined
    if [ -n "$FILTERS" ] && [ "$FILTERS" != "null" ] && [ "$FILTERS" != "NULL" ]; then
        # Split filters by semicolon
        IFS=';' read -ra filter_array <<< "$FILTERS"
        
        # Only proceed if we have actual filters
        if [ ${#filter_array[@]} -gt 0 ] && [ -n "${filter_array[0]}" ]; then
            # Create filter expressions
            local filter_expressions="["
            for filter in "${filter_array[@]}"; do
                # Split each filter into dimension:operator:value
                IFS=':' read -r dimension operator value <<< "$filter"
                if [ -n "$dimension" ] && [ -n "$operator" ] && [ -n "$value" ]; then
                    filter_expressions="$filter_expressions{\"filter\":{\"fieldName\":\"$dimension\",\"stringFilter\":{\"matchType\":\"$operator\",\"value\":\"$value\"}}}"
                    filter_expressions="$filter_expressions,"
                fi
            done
            filter_expressions="${filter_expressions%,}]"
            
            # Add filter to request body if we have valid expressions
            if [ "$filter_expressions" != "[]" ]; then
                request_body="$request_body,
    \"dimensionFilter\": {\"andGroup\":{\"expressions\":$filter_expressions}}"
            fi
        fi
    fi
    
    # Close the JSON object
    request_body="$request_body
}"
    
    echo "$request_body"
}

# Function to extract GA4 data
extract_ga4_data() {
    local property_id="$GA4_PROPERTY_ID"
    local request_body="$1"
    
    # Set up proxy if configured
    local proxy_args=""
    if [ -n "$PROXY_HOST" ] && [ -n "$PROXY_PORT" ]; then
        proxy_args="--proxy http://$PROXY_HOST:$PROXY_PORT"
        echo "Using proxy: http://$PROXY_HOST:$PROXY_PORT"
    fi
    
    # Get the access token using OAuth2
    local client_email=$(jq -r '.client_email' "$JSON_FILE_PATH")
    local private_key=$(jq -r '.private_key' "$JSON_FILE_PATH")
    local now=$(date +%s)
    local jwt_header='{"alg":"RS256","typ":"JWT"}'
    local jwt_claim="{\"iss\":\"$client_email\",\"scope\":\"https://www.googleapis.com/auth/analytics.readonly\",\"aud\":\"https://oauth2.googleapis.com/token\",\"exp\":$((now + 3600)),\"iat\":$now}"
    
    # Create JWT
    local jwt_header_base64=$(echo -n "$jwt_header" | base64 -w 0 | tr '+/' '-_' | tr -d '=')
    local jwt_claim_base64=$(echo -n "$jwt_claim" | base64 -w 0 | tr '+/' '-_' | tr -d '=')
    local jwt_signature=$(echo -n "$jwt_header_base64.$jwt_claim_base64" | openssl dgst -sha256 -sign <(echo -n "$private_key") -binary | base64 -w 0 | tr '+/' '-_' | tr -d '=')
    local jwt="$jwt_header_base64.$jwt_claim_base64.$jwt_signature"
    
    # Get access token
    local access_token=$(curl -s -X POST $proxy_args \
        -H "Content-Type: application/x-www-form-urlencoded" \
        -d "grant_type=urn:ietf:params:oauth:grant-type:jwt-bearer&assertion=$jwt" \
        "https://oauth2.googleapis.com/token" | jq -r '.access_token')
    
    if [ -z "$access_token" ]; then
        echo "Failed to get access token" >&2
        exit 1
    fi
    
    # Make GA4 API request and check response
    local response=$(curl -s -X POST \
        $proxy_args \
        -H "Authorization: Bearer $access_token" \
        -H "Content-Type: application/json" \
        -d "$request_body" \
        "https://analyticsdata.googleapis.com/v1beta/properties/$property_id:runReport")
    
    # Check if response contains error
    if echo "$response" | jq -e 'has("error")' > /dev/null; then
        local error_message=$(echo "$response" | jq -r '.error.message')
        echo "GA4 API Error: $error_message" >&2
        exit 1
    fi
    
    # Check if response has data
    if ! echo "$response" | jq -e 'has("rows")' > /dev/null; then
        echo "No data returned from GA4 API" >&2
        exit 1
    fi
    
    # If we get here, response is good, save to file
    output_file="ga4_data_$(date +%Y%m%d_%H%M%S).csv"
    echo "$response" > "$output_file"
    echo "$output_file"
}

# Main execution
main() {
    echo "Starting GA4 data extraction..."
    
    # Get configuration from Snowflake
    echo "Retrieving configuration from Snowflake..."
    get_snowflake_config
    
    # Create request body
    echo "Creating API request..."
    request_body=$(create_request_body)
    
    # Extract data
    echo "Extracting data from GA4..."
    output_file=$(extract_ga4_data "$request_body")
    
    echo "Data successfully extracted and saved to $output_file"
}

# Execute main function
main 
