#!/bin/bash

# Set error handling
set -e

# Function to get configuration from Snowflake using SnowSQL
get_snowflake_config() {
    # Assuming you have SnowSQL configured with credentials
    local query="SELECT json_file_path, proxy_host, proxy_port, dimensions, measures, dimension_filters, start_date, end_date FROM ga4_config_table WHERE is_active = TRUE;"
    
    # Execute query and store results in variables
    read -r json_file_path proxy_host proxy_port dimensions measures filters start_date end_date <<< $(snowsql -q "$query" --output-format=tsv)
    
    # Export variables for use in other functions
    export JSON_FILE_PATH="$json_file_path"
    export PROXY_HOST="$proxy_host"
    export PROXY_PORT="$proxy_port"
    export DIMENSIONS="$dimensions"
    export MEASURES="$measures"
    export FILTERS="$filters"
    export START_DATE="$start_date"
    export END_DATE="$end_date"
}

# Function to create GA4 API request body
create_request_body() {
    local dimensions_array=(${DIMENSIONS//,/ })
    local measures_array=(${MEASURES//,/ })
    
    # Create dimensions array
    local dimensions_json="["
    for dim in "${dimensions_array[@]}"; do
        dimensions_json="$dimensions_json{\"name\":\"$dim\"},"
    done
    dimensions_json="${dimensions_json%,}]"
    
    # Create metrics array
    local metrics_json="["
    for metric in "${measures_array[@]}"; do
        metrics_json="$metrics_json{\"name\":\"$metric\"},"
    done
    metrics_json="${metrics_json%,}]"
    
    # Create date ranges
    local date_ranges="[{\"startDate\":\"$START_DATE\",\"endDate\":\"$END_DATE\"}]"
    
    # Create dimension filters if provided
    local filter_json=""
    if [ -n "$FILTERS" ]; then
        # Split filters by semicolon
        IFS=';' read -ra filter_array <<< "$FILTERS"
        
        # Create filter expressions
        local filter_expressions="["
        for filter in "${filter_array[@]}"; do
            # Split each filter into dimension:operator:value
            IFS=':' read -r dimension operator value <<< "$filter"
            filter_expressions="$filter_expressions{\"filter\":{\"fieldName\":\"$dimension\",\"stringFilter\":{\"matchType\":\"$operator\",\"value\":\"$value\"}}}"
            filter_expressions="$filter_expressions,"
        done
        filter_expressions="${filter_expressions%,}]"
        
        # Create final filter json
        filter_json=",\"dimensionFilter\":{\"andGroup\":{\"expressions\":$filter_expressions}}"
    fi
    
    # Create request body
    cat <<EOF
{
    "dateRanges": $date_ranges,
    "dimensions": $dimensions_json,
    "metrics": $metrics_json$filter_json
}
EOF
}

# Function to extract GA4 data
extract_ga4_data() {
    local property_id="$GA4_PROPERTY_ID"
    local request_body="$1"
    
    # Set up proxy if configured
    local proxy_args=""
    if [ -n "$PROXY_HOST" ] && [ -n "$PROXY_PORT" ]; then
        proxy_args="--proxy http://$PROXY_HOST:$PROXY_PORT"
        echo "Using proxy: http://$PROXY_HOST:$PROXY_PORT"
    fi
    
    # Make API request and save directly to file
    output_file="ga4_data_$(date +%Y%m%d_%H%M%S).csv"
    curl -s -X POST \
        $proxy_args \
        -H "Content-Type: application/json" \
        --service-account "$JSON_FILE_PATH" \
        -d "$request_body" \
        "https://analyticsdata.googleapis.com/v1beta/properties/$property_id:runReport" > "$output_file"
    
    echo "$output_file"
}

# Main execution
main() {
    echo "Starting GA4 data extraction..."
    
    # Get configuration from Snowflake
    echo "Retrieving configuration from Snowflake..."
    get_snowflake_config
    
    # Create request body
    echo "Creating API request..."
    request_body=$(create_request_body)
    
    # Extract data
    echo "Extracting data from GA4..."
    output_file=$(extract_ga4_data "$request_body")
    
    echo "Data successfully extracted and saved to $output_file"
}

# Execute main function
main 
